name: Postgre Docker CI/CD

on:
  push:
    branches:
      - feat/build-pipeline

jobs:
  # Job 1: Définir le tag Docker en fonction de la branche
  setup-docker-tag:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: Définir le tag Docker en fonction de la branche
        id: set-tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "tag=prod" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "tag=pre-prod" >> $GITHUB_ENV
          else
            echo "tag=dev" >> $GITHUB_ENV
          fi
          echo "docker_tag=${{ env.tag }}" >> $GITHUB_OUTPUT

  # Job 2: Installer les dépendances et construire le projet
  install-dependencies-and-build:
    needs: setup-docker-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du dépôt
        uses: actions/checkout@v4

      - name: Configurer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Installer les dépendances
        run: npm ci --frozen-lockfile

      - name: Set up .env for Prisma
        run: echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env

      - name: Construire le projet
        run: npm run build

  # Job 3: Construire et déployer l'image Docker
  build-and-deploy-image:
    needs:
      - setup-docker-tag
      - install-dependencies-and-build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout du dépôt
        uses: actions/checkout@v4

      - name: Valider le tag généré
        run: |
          TAG="${{ needs.setup-docker-tag.outputs.docker_tag }}"
          if [[ ! "$TAG" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
            echo "Invalid tag format: $TAG"
            exit 1
          fi

      - name: Connexion au GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Construire et pousser l'image Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/dockerappsandbox/back:${{ needs.setup-docker-tag.outputs.docker_tag || 'latest' }}
